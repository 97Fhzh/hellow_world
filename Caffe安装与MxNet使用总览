
caffe 安装


发表于：2018-05-14 13:56阅读：60评论：0


1 sudo 安装caffe
sudo apt-get install git
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install python-dev
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev

git clone https://github.com/bvlc/caffe.git1
2
3
4
5
6
7
8


problem: can’t find hdf5
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial
1
2
3


2、安装caffe，没有root权限，Ubuntu

Ubuntu 
https://github.com/yosinski/caffe/blob/jason_public/doc/linux-no-root-install-log.md 
protobuf 2.50 
安装包https://github.com/google/protobuf/releases?after=v2.6.1 
 //snappy 
http://pkgs.fedoraproject.org/repo/pkgs/snappy/ 
Install leveldb
git clone https://github.com/google/leveldb.git
[~/temp/leveldb-1.15.0] $ make
cd /home/gaomingda/caffe_dev/leveldb/out-shared/
$ cp -av libleveldb.* $HOME/local/lib/
cd /home/gaomingda/caffe_dev/leveldb/out-static/
$ cp -av libleveldb.* $HOME/local/lib/
[~/temp/leveldb-1.15.0] $ cp -av include/leveldb $HOME/local/include/1
2
3
4
5
6
7


install hdf5 
https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.14/src/

Install OpenBlas
$ cd ~/temp/
$ git clone git://github.com/xianyi/OpenBLAS
$ cd OpenBlas
$ make FC=gfortran
#显示没有安装gfortran 
$ make PREFIX=$HOME/local install
#安装gfortran,no-root
https://www.scivision.co/install-linuxbrew/
1
2
3
4
5
6
7
8
9


安装OpenCV3 
 conda install -c menpo opencv3=3.2.0 
取消注释caffe/Makefile.config中 
OPENCV_VERSION := 3 
然后终端
export LD_LIBRARY_PATH=/home/hossein/anaconda2/lib:$LD_LIBRARY_PATH1


或者 
Instead of globally modifying LD_LIBRARY_PATH, we can add the following line to the Makefile.config (for example after the lines that define ANACONDA_HOME and PYTHON_INCLUDE [lines 76-79 I believe]):

LDFLAGS += -Wl,-rpath,$(ANACONDA_HOME)/lib 
 This will basically tell the Caffe library at runtime where to look for libraries

ImportError: No module named caffe.proto 
可能原因：这种情况一般是没有把caffe中的和python相关的内容的路径添加到python的编译路径中。 
解决办法：执行命令
export PYTHONPATH=$CAFFE_ROOT/python:$PYTHONPATH  1


在.100机子无权限编译
In file included from .build_release/src/caffe/proto/caffe.pb.cc:4:0:
.build_release/src/caffe/proto/caffe.pb.h:12:2: error: #error This file was generated by a newer version of protoc which is
 #error This file was generated by a newer version of protoc which is
  ^
.build_release/src/caffe/proto/caffe.pb.h:13:2: error: #error incompatible with your Protocol Buffer headers. Please update
 #error incompatible with your Protocol Buffer headers.  Please update
  ^
.build_release/src/caffe/proto/caffe.pb.h:14:2: error: #error your headers.
 #error your headers.1
2
3
4
5
6
7
8
9


anaconda和local安装 的protobuf冲突

查看版本

which protoc 
 protoc –version

尝试卸载anaconda的
conda uninstall protobuf1


不好使

conda安装protobuf-2.5

conda install -c stephentu protobuf 
**install protobuf 2.6.1 
 conda install -c anaconda protobuf=2.6.1 
指定版本 
conda install -y –channel https://conda.anaconda.org/conda-forge \ 
 gflags \ 
 glog \ 
 numpy \ 
 protobuf=3.2.0 
发现不是anaconda的问题，而是HOME/local必须安装protobuf-2.50 卸载，先进入安装包，然后make uninstall

sudo权限安装的https://www.howtoinstall.co/en/ubuntu/trusty/protobuf-compiler?action=remove

2、
/home/gaomingda/anaconda2/lib/libopencv_imgcodecs.so: undefined reference to `jpeg_stdio_dest@LIBJPEG_9.0'
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target '.build_release/tools/upgrade_net_proto_binary.bin' failed1
2
3


参考http://write.blog.csdn.net/mdeditor#!postId=78480844 OpenCV3的安装

3、 在python中导入caffe时
from ._caffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, \
ImportError: libglog.so.0: cannot open shared object file: No such file or directory1
2


解决方案，将 加入
LD_LIBRARY_PATH=/home/gaomingda/local/lib:$LD_LIBRARY_PATH1


在服务器matplotlib不能显示，报错

参考https://www.cnblogs.com/xuanxufeng/p/6240659.html

二、windows

三、caffe2 ubuntu16.04 anaconda2 安装

其中 Anaconda is installed in ~/anaconda2
# Create a conda environment (optional)
conda create -n my_caffe2_env python=2.7 && source activate my_caffe2_env

# Install required packages
# mkl isn't actually required, but is really recommended for Anaconda
conda install -y \
    future \
    gflags \
    glog \
    lmdb \
    mkl \
    mkl-include \
    numpy \
    opencv \
    protobuf \
    snappy \
    six

# Clone Caffe2
cd ~ && git clone --recursive https://github.com/caffe2/caffe2.git && cd caffe2

# Make Caffe2 in a separate folder to avoid polluting the Caffe2 source tree.
# This can be anywhere you want it
mkdir build && cd build

# Add flags to this command to control which packages you want to use. The
# options to use are at the top of CMakeLists.txt in the topmost Caffe2
# directory
# use cuda，管理员已经装好驱动
cmake -DUSE_CUDA=ON -DUSE_LEVELDB=OFF -DCMAKE_PREFIX_PATH=~/anaconda2/envs/my_caffe2_env -DCMAKE_INSTALL_PREFIX=~/anaconda2/envs/my_caffe2_env -DCMAKE_CXX_FLAGS=-D__GLIBCXX_USE_CXX11_ABI=0 ..
make install1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31


环境变量
export PYTHONPATH=/home/gaomingda/anaconda2/envs/my_caffe2_env:$PYTHONPATH
export PYTHONPATH=$PYTHONPATH:/home/gaomingda/caffe2/build
export LD_LIBRARY_PATH=/home/gaomingda/anaconda2/envs/my_caffe2_env/lib:$LD_LIBRARY_PATH1
2
3

export PYTHONPATH=/home/gaomingda/local:$PATHONPATH
export PYTHONPATH=$PATHONPATH:/home/gaomingda/caffe2/build
export LD_LIBRARY_PATH=/home/gaomingda/local/lib:$LD_LIBRARY_PATH1
2
3


六、Ubuntu wget 正在连接 失败：拒绝连接

http://blog.csdn.net/asiawong/article/details/78558120

七 、卸载nvidia驱动

sudo apt-get remove –purge nvidia* 
安装nvidia 
参考https://blog.csdn.net/full_speed_turbo/article/details/76339296
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt-get update
sudo apt-get install nvidia-375 # 根据提示安装相应的版本
sudo apt-get install mesa-common-dev
sudo apt-get install freeglut3-dev```

出现问题1
2
3
4
5
6
7


####问题

sudo ldconfig 
 /sbin/ldconfig.real: /usr/lib/nvidia-384/libEGL.so.1 is not a symbolic link

/sbin/ldconfig.real: /usr/lib32/nvidia-384/libEGL.so.1 is not a symbolic link

####解决

sudo mv /usr/lib/nvidia-384/libEGL.so.1 /usr/lib/nvidia-384/libEGL.so.1.org 
 sudo mv /usr/lib32/nvidia-384/libEGL.so.1 /usr/lib32/nvidia-384/libEGL.so.1.org 
 sudo ln -s /usr/lib/nvidia-384/libEGL.so.384.111 /usr/lib/nvidia-384/libEGL.so.1 
 sudo ln -s /usr/lib32/nvidia-384/libEGL.so.384.11 /usr/lib32/nvidia-384/libEGL.so.1
**3、安装cuda**

**4、安装cudnn-8.0-linux-x64-v5.1.tgz**

先解压，解压后为cuda文件夹
1
2
3
4
5
6


cd cuda 
 sudo cp include/cudnn.h /usr/local/cuda/include/ 
 sudo cp lib64/* /usr/local/cuda/lib64/ 
 cd /usr/local/cuda/lib64/ 
 sudo rm -rf libcudnn.so libcudnn.so.5 
 sudo ln -s libcudnn.so.5.1.10 libcudnn.so.5 #生成软衔接 
sudo ln -s libcudnn.so.5 libcudnn.so #生成软链接 
----------------------------------------------------------------------------------------------------------------------


MxNet使用总览


发表于：2018-05-14 13:54阅读：27评论：0


写这篇博文的初衷是希望能整理下自己在使用MxNet过程中对这个框架的理解。详细的介绍都给出了链接，这篇相当于一个概括，希望能对这个框架有一个总的认识，内容会不断补充，有疑问的欢迎交流，谢谢。

1、下载MxNet并编译 
MxNet的官方网址：http://mxnet.io/get_started/install.html 
我这里选择如下安装方式：

这里写图片描述

然后按照 Build the MXNet core shared library 介绍的4个步骤进行安装即可：

step1主要是更新一些工具和git，apt-get就是从网上获取并安装的意思。 
Step 1 Install build tools and git.
$ sudo apt-get update
$ sudo apt-get install -y build-essential git12

step2是安装OpenBLAS，这是一个计算加速库，当你step4要编译openlab的时候如果这个地方没有安装好openlab就会报错。 
Step 2 Install OpenBLAS.
$ sudo apt-get install -y libopenblas-dev liblapack-dev1

安装opencv，opencv主要用在图像数据导入和预处理。 
Step 3 Install OpenCV.
$ sudo apt-get install -y libopencv-dev1

前面3个step可以看成是准确工作，step4是拉取mxnet项目，然后编译，注意编译的时候有几个参数，如果要用GPU的话，USE_CUDA是必须要有的，另外USE_CUDNN是NVIDIA的一个深度神经网络加速库，一般也是需要的，如果没有的话最多速度慢一些，但是可以跑，建议用。 
Step 4 Download MXNet sources and build MXNet core shared library.
$ git clone --recursive https://github.com/dmlc/mxnet
$ cd mxnet
$ make -j $(nproc) USE_OPENCV=1 USE_BLAS=openblas USE_CUDA=1 USE_CUDA_PATH=/usr/local/cuda USE_CUDNN=1123

如果你没编译mxnet就在python环境中import mxnet，就会出现找不到mxnet的错误。 
上面这些运行成功后，你可以在mxnet/python/目录下进入python环境，并且import mxnet成功，但是如果想要在任何地方都可以成功import mxnet，还需要以下操作： 
step 1：安装一些需要的库
$ sudo apt-get install -y python-dev python-setuptools python-numpy python-pip1

step 2：先升级pip命令，然后用pip install -e .表示install a project in editable mode，就可以在任何地方import mxnet了。
$ cd python
$ pip install --upgrade pip
$ pip install -e .123

2、训练模型的入口 
我们知道训练一个模型需要定义一个网络结构，然后喂给这个网络数据，最后训练得到合适的模型。又因为现在基本上都是在预训练模型上做fine-tune，所以这里直接介绍MxNet里面fine-tune的快速操作。可以参看博文：MXNet的预训练：fine-tune.py源码详解。 
在fine-tune.py这个脚本中，最重要的是调用了fit.fit()函数训练，这个fit.py脚本的介绍可以看博客：MXNet的训练入口：fit.py源码详解。这个脚本也是在最终训练之前封装好的一个脚本。那么具体训练的细节在哪呢？答案是base_module.py和module.py。base_module.py是MxNet训练模型的基类的脚本，而module.py则是继承base_module里面的基类的具体实现，包括前向和后向传递等等，相关的博文介绍可以参看：MXNet的训练基础脚本：base_module.py和MXNet的训练实现脚本：module.py。

3、关于数据读取和预处理 
fine-tune.py这个脚本是MxNet官方写好的，默认的数据读入方式是.rec，类似Caffe里面的LMDB，关于数据读取，可以参看博文：MXNet的数据读取：data.py源码详解。这种.rec格式的数据一般需要较多的存储空间，当你需要灵活增减数据时候需要重新生成新的.rec文件，不是很灵活，因此推荐使用lst列表和原始图像结合的数据读取方式，可以参看博文：MXNet如何用mxnet.image.ImageIter直接导入图像。这种数据读取的方式还涉及图像预处理的部分，原来的MxNet项目中没有相应的例子，可以参看博文：MXNet的数据预处理：mxnet.image.CreateAugmenter源码详解。了解在mxnet.image.ImageIter中是怎么做图像预处理的。
