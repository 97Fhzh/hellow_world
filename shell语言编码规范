军规条例1 开发脚本时，必须在脚本开头行编写脚本解析器。
【返回总览】
说明：某些开发人员一般采用默认的B SHELL 即#!/bin/bash ，也有采用#!/bin/sh，两者在语法上是存在一定差异的，无特殊情况下，必须强制使用#!/bin/bash。
军规条例2 给变量赋值时，必须使用双引号将字符串包含起来。
【返回总览】
说明：如果值包含斜杠、空格等特殊字符时，值语句必须使用双引号将值包含起来，当值中包含转义符号‘\’时，必须对其进行转义后进行赋值。对变量赋值时，如果值中包含空格等特殊字符，则将出现错误或者无法预知的结果，因此使用时必须用双引号将值本身包含起来。
如：env = “sdkfj\\ sfdd”;
军规条例3 初始化一个变量为空时，必须使用num="" 或者unset num,不得使用num=之类的表达式。
【返回总览】
说明：需要对一变量进行空赋值时，建议使用unset。
示例：
建议使用：
unset num
num=””
不建议使用：
num=
军规条例4 引用字符串变量时必须使用双引号。
【返回总览】
说明：变量的值如果是外部的输入或读取文件内容时，其内容中可能包含特殊字符，如果不使用双引号，一旦出现特殊字符将导致语句出现不可预知的错误。
示例：
脚本接受用户输入，然后打印，如果不使用双引号将出现错误。
正确的语句：
#!/bin/bash
while read -r LINE ; do
echo “${LINE}”
done
用户输入*程序正常打印*，程序运行正常，达到预期目的。
错误的语句：
#!/bin/bash
while read -r LINE ; do
echo ${LINE}
done
用户输入*程序将输出当前目录下的文件名，程序运行出错，扩展输出了文件名，未达到预期目的。
军规条例5 对rm命令必须进行充分判断，禁止使用rm * 命令匹配删除所有文件。
【返回总览】
说明：语句中调用rm –rf *命令删除文件时，易出现文件误删除，导致系统严重事故发生。因此如果语句中需要使用该命令，务必将匹配条件做到精准；删除文件的路径，优先使用绝对路径，路径中包含变量时，充分考虑各种情况，确保不会出现因匹配导致的误操作漏洞。
示例1：
语句中调用rm –rf * 命令删除某个目录下所有以S打头和isisd结尾的所有文件。
正确的语句：
rm -rf /etc/init.d/rc5.d/S*isisd
解读：匹配模式做到精准匹配，锁定匹配范围的大小，避免自动匹配到其他文件名；文件路径为绝对路径，避免因路径错误而导致删除其他文件。
示例2：
删除某变量指定的目录下所有文件。
正确的语句：
[ -n “${FILE_PATH}” ] && rm -rf ${FILE_PATH}/*
解读：如果不对变量${FILE_PATH}进行判断，当某些场景下出现为空时，语句将错误的删除根目录下的文件，引发系统事故，增加判断后，出错风险大大降低。
错误的语句：
rm -rf ${FILE_PATH}/*
变量${FILE_PATH}为空时，直接删除了系统根目录下的文件，导致事故。
军规条例6 通过命令ln创建软链接文件时，语句逻辑中必须先判断文件是否存在，存在时必须先删除，再通过ln命令创建新的链接。
【返回总览】
说明：当链接文件已存在时，且指向的目标类型为目录时，通过ln命令新建链接，命令返回成功，但实际没有达到目的，而是在原目标目录内产生了一个链接文件。
示例：
语法： ln –sf 目标文件 链接文件名
linux0710:/root # ln -sf /home testlink
linux0710:/root # echo $?
0
linux0710:/root # ls -ltr testlink
lrwxrwxrwx 1 root root 5 Feb 14 08:30 a -> /home
linux0710:/root # ln -sf /dev testlink
linux0710:/root # echo $?
0
linux0710:/root # ls -ltr testlink
lrwxrwxrwx 1 root root 5 Feb 14 08:30 a -> /home
实际没有链接到/dev，而是在/home下新产生了一个dev的链接文件，因此看到上面命令返回为0成功，它是表示在/home下新建dev链接文件成功：
linux0710:/root # ls -ltr /home
lrwxrwxrwx 1 root root 4 Feb 14 08:33 dev -> /dev
这个问题并不是ln命令的BUG,而是由于用户的一般认知与ln命令本身的实现原理之间存在差异导致，用户一般认为ln创建链接时，类似于Windows平台的快捷方式，执行命令时应该理所当然的重新指向到新的目标，但ln命令的处理机制不一样，不同点就是：处理指向目录的链接文件与普通文件不同，当链接文件存在时，再次执行ln创建链接时会进行扩展，会识别之前链接指向的目录，自动在该目录内建立对应文件名的链接文件。因此会出现上面示例的情形。
错误的写法：
ln –sf /dev /home/testlink
如果/home/a链接文件存在且指向另外一个目录时，将达不到程序预期目的。
正确的写法：
[ -h /home/testlink ] && rm –f /home/testlink
ln –sf /dev /home/testlink
军规条例7 字符串比较语句中，比较时请使用双引号将变量括起来。
【返回总览】
说明：由于变量的字符串值是动态获取，最后获取的值可能存在一些特殊的符号等，这将导致语句出现语法错误。
示例1：
正确：
[ -n “$STR” ] && echo Yes
错误：
[ -n $STR ] && echo Yes
示例2：
echo ${variable}
[ “${variable}” = “foo” ] && echo “Right, it’s foo…”
[ “$?” = “0” ] && echo “do-something”
军规条例8 对变量进行引用或字符串组合时，必须使用${}将变量括起来。
【返回总览】
说明：对变量进行字符串组合或者引用时，虽然脚本解析器会自动匹配变量，但是在某些特殊的变量名称场景下可能出错，为了避免出错，必须将变量通过${}括起来。
示例：
假设需要打印：The host is hosta
myhost=”host”
echo “The host is $myhosta”
echo “The host is $myhost a”
那么上述语句将打印错误。
建议使用：
myhost=”host”
echo “The host is ${myhost}a”
军规条例9 cat $STR 、grep $STR /etc/mtab 语句时，必须进行$STR的非空判断，同时通过双引号将变量括起，否则为空时导致程序挂死。
【返回总览】
当使用grep搜索某个变量值内容时，如果变量值为空或者包含特殊字符时，grep将出现挂死或者未知的错误。
军规条例10 变量要初始化。
【返回总览】
说明：变量未初始化导致错误操作。
示例：
rm -rf ${chroot}/usr/share/doc
如果${chroot}未初始化，则可能导致/usr/share/doc被删除。
ps –efww
军规条例11 调用阻塞命令时，必须设置命令超时时间，做好超时异常处理
【返回总览】
军规条例12 命令替换使用$()，而不是使用``。
【返回总览】
说明：
1、` ` 很容易与 ' ' ( 单引号)搞混乱，尤其对初学者来说。
2、使用$()对命令域包含起来，不容易丢失，清晰直观。
示例：
建议使用：
kernel=$(uname –r)
不建议使用：
kernel=`uname –r`
